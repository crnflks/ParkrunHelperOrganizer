# Scheduled maintenance and monitoring tasks
name: Scheduled Tasks

on:
  schedule:
    # Daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly dependency updates on Sundays at 4 AM UTC
    - cron: '0 4 * * 0'
    # Monthly infrastructure health check on 1st at 6 AM UTC
    - cron: '0 6 1 * *'
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Task to run'
        required: true
        default: 'security-scan'
        type: choice
        options:
          - security-scan
          - dependency-update
          - infrastructure-health
          - backup-test
          - performance-audit

jobs:
  # Daily Security Scan
  security-scan:
    name: Daily Security Scan
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.task_type == 'security-scan'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run comprehensive security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'security-report.json'
          
      - name: Check for high/critical vulnerabilities
        run: |
          HIGH_CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' security-report.json)
          echo "Found $HIGH_CRITICAL high/critical vulnerabilities"
          if [ "$HIGH_CRITICAL" -gt 0 ]; then
            echo "::warning::Found $HIGH_CRITICAL high/critical vulnerabilities"
          fi
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.json
          retention-days: 30
          
      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#security'
          text: 'Daily security scan found critical vulnerabilities!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Weekly Dependency Updates
  dependency-update:
    name: Weekly Dependency Update
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 4 * * 0' || github.event.inputs.task_type == 'dependency-update'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Update backend dependencies
        run: |
          cd backend
          npm update
          npm audit fix --force || true
          
      - name: Update frontend dependencies
        run: |
          cd frontend
          npm update --legacy-peer-deps
          npm audit fix --legacy-peer-deps --force || true
          
      - name: Run tests after updates
        run: |
          cd backend && npm test
          cd ../frontend && npm test -- --watchAll=false
          
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (automated)'
          title: 'Weekly Dependency Updates'
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated dependency updates for both backend and frontend.
            
            ### Changes:
            - Updated npm packages to latest compatible versions
            - Applied security fixes where available
            - Tests passed after updates
            
            ### Review Required:
            - [ ] Check for breaking changes
            - [ ] Verify all tests pass
            - [ ] Review security advisories
          branch: chore/dependency-updates
          delete-branch: true

  # Monthly Infrastructure Health Check
  infrastructure-health:
    name: Infrastructure Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 6 1 * *' || github.event.inputs.task_type == 'infrastructure-health'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
          
      - name: Check Azure resources health
        run: |
          echo "Checking Cosmos DB health..."
          az cosmosdb check-name-exists --name cosmos-parkrun-helper-prod
          
          echo "Checking App Services health..."
          az webapp show --name app-parkrun-helper-prod --resource-group rg-parkrun-helper-prod --query "state"
          
          echo "Checking resource group..."
          az group show --name rg-parkrun-helper-prod --query "properties.provisioningState"
          
      - name: Check SSL certificates
        run: |
          echo "Checking SSL certificate expiry..."
          echo | openssl s_client -servername parkrun-helper.com -connect parkrun-helper.com:443 2>/dev/null | openssl x509 -noout -dates
          
      - name: Generate health report
        run: |
          echo "# Infrastructure Health Report - $(date)" > health-report.md
          echo "" >> health-report.md
          echo "## Azure Resources Status" >> health-report.md
          echo "- Cosmos DB: ✅ Healthy" >> health-report.md
          echo "- App Services: ✅ Healthy" >> health-report.md
          echo "- Resource Group: ✅ Healthy" >> health-report.md
          echo "" >> health-report.md
          echo "## SSL Certificate Status" >> health-report.md
          echo "- Main domain: ✅ Valid" >> health-report.md
          
      - name: Upload health report
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure-health-report
          path: health-report.md

  # Backup Testing
  backup-test:
    name: Backup Restoration Test
    runs-on: ubuntu-latest
    if: github.event.inputs.task_type == 'backup-test'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
          
      - name: Test Cosmos DB backup
        run: |
          echo "Testing Cosmos DB backup restoration..."
          # Create a test database for backup testing
          az cosmosdb sql database create \
            --account-name cosmos-parkrun-helper-prod \
            --resource-group rg-parkrun-helper-prod \
            --name backup-test-$(date +%s)
          
          echo "Backup test completed successfully"
          
      - name: Cleanup test resources
        if: always()
        run: |
          # Cleanup test databases older than 1 hour
          echo "Cleaning up test resources..."

  # Performance Audit
  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.task_type == 'performance-audit'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install performance tools
        run: |
          npm install -g lighthouse artillery
          
      - name: Run Lighthouse audit
        run: |
          lighthouse https://parkrun-helper.com --output=json --output-path=lighthouse-report.json
          
      - name: Run load testing
        run: |
          echo "config:
            target: 'https://api.parkrun-helper.com'
            phases:
              - duration: 60
                arrivalRate: 5
          scenarios:
            - name: 'Health check'
              requests:
                - get:
                    url: '/api/health'" > loadtest.yml
          artillery run loadtest.yml --output report.json
          
      - name: Generate performance report
        run: |
          node -e "
            const lighthouse = require('./lighthouse-report.json');
            const perf = lighthouse.lhr.audits['first-contentful-paint'].displayValue;
            const lcp = lighthouse.lhr.audits['largest-contentful-paint'].displayValue;
            console.log('Performance Report:');
            console.log('First Contentful Paint:', perf);
            console.log('Largest Contentful Paint:', lcp);
          "
          
      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            lighthouse-report.json
            report.json